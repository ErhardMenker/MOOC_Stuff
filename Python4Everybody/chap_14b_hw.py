''' HUGELY IMPORTANT: A program to store the tuple characteristics of a JSON file 
into a sqlite database Reads in roster_data.json file (same as chap_14_b)'''

import json
import sqlite3

# create a database in this script's file and connect to it
conn = sqlite3.connect('rosterdb.sqlite')
cur = conn.cursor()

# SETUP ('User' and 'Course' tables have defining title with associated primary key,
# and these unique instances get mapped to a unique entry in the Member junction table)
cur.executescript('''
DROP TABLE IF EXISTS User;
DROP TABLE IF EXISTS Member;
DROP TABLE IF EXISTS Course;
DROP TABLE IF EXISTS Role;

CREATE TABLE User (
    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
    title   TEXT UNIQUE
);
    
CREATE TABLE Course (
    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
    title   TEXT UNIQUE
);

CREATE TABLE Role (
    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
    title   INTEGER UNIQUE
);

CREATE TABLE Member (
    user_id  INTEGER,
    course_id   INTEGER,
    role   INTEGER,
    PRIMARY KEY (user_id, course_id, role)
)
''') 

fname = input('Enter file name: ')
if len(fname) < 1: fname = 'roster_data.json'

# JSON structure examples:
# [
#   [ "Charley", "si110", 1 ],
#   [ "Mea", "si110", 0 ],

# Use JSON package on file to make it parsable:
str_data = open(fname).read()
json_data = json.loads(str_data)

# Loop through each entry of parsable JSON:
for entry in json_data:
    
    # refer to the "JSON structure examples" a few lines up to see how we subset... 
    # ...the JSON as such
    name = entry[0]
    course = entry[1]
    role = entry[2]
    
    print(name, course, role)
    
    # Ignore if already exists, otherwise place User value into title column where...
    # ...autoincrement will assign a primary key in this foreign table
    cur.execute('''INSERT OR IGNORE INTO User (title) VALUES ( ? )''', ( name, ))
    cur.execute('SELECT id FROM User WHERE title = ? ', (name, ))
    # fetch the user_id generated by autoincrement with associated user, to be stored as foreign key in Member table.
    user_id = cur.fetchone()[0]
    
    cur.execute('''INSERT OR IGNORE INTO Course (title) VALUES ( ? )''', (course, ))
    cur.execute('SELECT id FROM Course WHERE title = ? ', (course, ))
    # fetch the course_id generated by autoincrement with associated course, to be stored as foreign key in Member table.
    course_id = cur.fetchone()[0]
    
    cur.execute('''INSERT OR IGNORE INTO Role (title) VALUES ( ? )''', (role, ))
    cur.execute('SELECT id FROM Role WHERE title = ? ', (role, ))
    role_id = cur.fetchone()[0]
    
    cur.execute('''INSERT OR REPLACE INTO Member (user_id, course_id, role) 
    VALUES ( ?, ?, ?)''', (user_id, course_id, role))
    
    conn.commit()
